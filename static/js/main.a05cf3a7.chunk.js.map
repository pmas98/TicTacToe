{"version":3,"sources":["logo.svg","Components/Board.js","Components/Square.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Board","props","react_default","a","createElement","Object","assign","className","Square","x","o","defaultSquares","Array","fill","lines","App","_useState","useState","_useState2","slicedToArray","squares","setSquares","_useState3","_useState4","winner","setWinner","useEffect","isComputerTurn","filter","square","length","linesThatAre","b","c","squareIndexes","squareValues","map","index","JSON","stringify","sort","emptyIndexes","val","playerWon","computerWon","putComputerAt","newSquares","toConsumableArray","winningLines","playerwinlines","middleLines","Math","ceil","random","href","rel","type","Components_Board","Components_Square","onClick","alert","console","log","handleSquareClick","id","some","sq","class","window","location","reload","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.a05cf3a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from 'react'\r\n\r\nfunction Board (props) {\r\n    return(\r\n    <div className=\"board\" {...props}/>\r\n    );\r\n}\r\n\r\nexport default Board;","import React from 'react'\r\n\r\nfunction Square(props){\r\n    return(\r\n        <div className='square' {...props}>{props.x ? 'x' : (props.o ? 'o' : '')}</div>\r\n    );\r\n}\r\n\r\nexport default Square","import logo from './logo.svg';\nimport './App.css';\nimport Board from \"./Components/Board.js\"\nimport Square from './Components/Square';\nimport {useState,useEffect} from 'react';\nimport React from 'react'\n\nconst defaultSquares = () => (new Array(9)).fill(null);\n\nconst lines = [\n  [0,1,2],[3,4,5],[6,7,8],\n  [0,3,6],[1,4,7],[2,5,8],\n  [0,4,8],[2,4,6]\n];\n\nfunction App() {\n\n  const [squares, setSquares] = useState(defaultSquares());\n  const [winner,setWinner] = useState(null);\n\n  useEffect(() => {\n    \n    const isComputerTurn = squares.filter(\n      square => square !== null).length % 2 === 1;\n\n    const linesThatAre = (a,b,c) => {\n      return lines.filter(squareIndexes => {\n        const squareValues = squareIndexes.map(index => squares[index])\n        return JSON.stringify([a,b,c].sort()) === JSON.stringify(squareValues.sort());\n      })\n    }\n\n    const emptyIndexes = squares.map((square,index) => \n      square === null ? index : null\n    ).filter(val => val !== null)\n\n    const playerWon = linesThatAre('x','x','x').length>0;\n    const computerWon = linesThatAre('o','o','o').length>0;\n\n    if(playerWon){\n      setWinner('x')\n    }\n    if(computerWon){\n      setWinner('o')\n    }\n\n    const putComputerAt = index => {\n      let newSquares = squares;\n      newSquares[index] = 'o';\n      setSquares([...newSquares]);\n    }\n\n    if(isComputerTurn){\n\n    const winningLines = linesThatAre('o','o',null)\n    const playerwinlines = linesThatAre('x','x',null)\n    const middleLines = linesThatAre('o', null, null)\n\n      if(winningLines.length>0){\n        const winIndex = winningLines[0].filter(index => squares[index] === null)[0]\n        putComputerAt(winIndex)\n        return;\n      }\n\n      if(playerwinlines.length>0){\n        const pwinIndex = playerwinlines[0].filter(index => squares[index] === null)[0]\n        putComputerAt(pwinIndex)\n        return;\n      }\n\n      if(middleLines.length>0){\n        const middleLIndex = middleLines[0].filter(index => squares[index] === null)[0]\n        putComputerAt(middleLIndex)\n        return;\n      }\n\n      if(playerwinlines.length>0){\n        const pwinIndex = playerwinlines[0].filter(index => squares[index] === null)[0]\n        putComputerAt(pwinIndex)\n        return;\n      }\n\n    const randomIndex = emptyIndexes[Math.ceil(Math.random()*emptyIndexes.length)];\n    putComputerAt(randomIndex)\n  }\n\n  });\n  \n    function handleSquareClick(index) {\n      const isPlayerTurn = squares.filter(\n        square => square !== null).length % 2 === 0;\n      if(isPlayerTurn){\n        if(squares[index] === 'x' | squares[index] === 'o'){\n          alert(\"bro... you trying to cheat?\")\n        }\n        else{\n        let newSquares = squares;\n        newSquares[index] = 'x';\n        setSquares([...newSquares]);\n        }\n      }\n      console.log(squares)\n    }\n\n    function reload() {\n      window.location.reload();\n  }\n\n  function Continue(arr){\n    return arr.some(sq => sq === null);\n  }\n\n    return (\n    <main>\n    <link href=\"//db.onlinewebfonts.com/c/229a57bbeef591e04a1fdfe347c90864?family=Centra+No2\" rel=\"stylesheet\" type=\"text/css\" />\n      <Board>\n        {squares.map((square,index) => \n        <Square\n          x={square==='x'?1:0}\n          o={square==='o'?1:0}\n          onClick={() => handleSquareClick(index)} />\n          )}\n      </Board>\n      {!!winner && winner === 'x' && (\n        <div className='result green' id= \"clear\">\n          You Won!\n        </div>\n      )}\n      {!!winner && winner === 'o' && (\n        <div className='result red'  id= \"clear\">\n          Computer Won! <p>(surely it cheated)</p>\n        </div>\n      )}\n      {Continue(squares) === false && (\n        <div className='result red'  id= \"clear\">\n          Draw! \n        </div>\n      )}\n      \n      <div class=\"flexDiv\">\n        <button onClick={() => {setSquares(defaultSquares())\n                                reload()\n      }\n                        \n        }>\n          Play Again\n        </button>\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}